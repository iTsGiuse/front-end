<template>
  <div>
    <h2>Calcolo Bottiglie Necessarie</h2>

    <label>
      Numero di persone:
      <input type="number" v-model="numberOfPeople" min="1" />
    </label>

    <button @click="calculateAll" class="btn btn-primary mt-3">Calcola</button>

    <div v-if="showTable" class="container mt-4">
      <div v-for="(category, categoryName) in categories" :key="categoryName" class="row">
        <div class="col-md-6">
          <h3>{{ categoryName.charAt(0).toUpperCase() + categoryName.slice(1) }}</h3>
          <table class="table">
            <thead>
              <tr>
                <th>Dettaglio</th>
                <th>Totale Bottiglie</th>
                <th>Litri</th>
                <th>Centilitri</th>
                <th>Millilitri</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(item, itemName) in category" :key="itemName">
                <td>{{ itemName.charAt(0).toUpperCase() + itemName.slice(1) }}</td>
                <td>{{ calculateTotal(categoryName, itemName).bottles || '-' }}</td>
                <td>{{ calculateTotal(categoryName, itemName).liters || '-' }}</td>
                <td>{{ calculateTotal(categoryName, itemName).centiliters || '-' }}</td>
                <td>{{ calculateTotal(categoryName, itemName).milliliters || '-' }}</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      numberOfPeople: 1,
      showTable: false,
      categories: {
        acqua: {
          frizzante: { amountPerPerson: 0.25, amountPerBottle: 1 },
          naturale: { amountPerPerson: 0.25, amountPerBottle: 1 },
          totale: { amountPerPerson: 0.5, amountPerBottle: 1 }
        },
        birra: {
          paulaner: { amountPerPerson: 0.25, amountPerBottle: 0.25 },
          heineken: { amountPerPerson: 0.25, amountPerBottle: 0.25 },
          totale: { amountPerPerson: 0.5, amountPerBottle: 1 },
        },
        analcolici: {
          coca: { amountPerPerson: 0.3,},
          fanta: { amountPerPerson: 0.11,},
          thePesca: { amountPerPerson: 0.07,},
          theLimone: { amountPerPerson: 0.07,},
          redbull: { amountPerPerson: 0.05, amountPerBottle: 0.25 },
          totale: { amountPerPerson: 0.60, amountPerBottle: 1 }
        },
        shots: {
          montenegro: { amountPerPerson: 0.0375, amountPerBottle: 0.7 },
          jeger: { amountPerPerson: 0.0375, amountPerBottle: 0.7 },
          limoncino: { amountPerPerson: 0.0375, amountPerBottle: 0.7 },
          vodkaZucc: { amountPerPerson: 0.0375, amountPerBottle: 0.7 },
          totale: { amountPerPerson: 0.15, amountPerBottle: 0.7 }
        },
        drink: {
          rum: { amountPerPerson: 0.02, amountPerBottle: 0.7 },
          gin: { amountPerPerson: 0.05, amountPerBottle: 0.7 },
          vodka: { amountPerPerson: 0.03, amountPerBottle: 0.7 },
          tonica: { amountPerPerson: 0.06, amountPerBottle: 1 },
          lemonSoda: { amountPerPerson: 0.15, amountPerBottle: 1 },
          succoPera: { amountPerPerson: 0.09, amountPerBottle: 1 },
          totale: { amountPerPerson: '', amountPerBottle: '' },
        },
        spritz: {
          aperol: { amountPerPerson: 0.03, amountPerBottle: 0.7 },
          prosecco: { amountPerPerson: 0.04, amountPerBottle: 0.75 },
          soda: { amountPerPerson: 0.02, amountPerBottle: 1 },
          totale: { amountPerPerson: '', amountPerBottle: '' }
        }
      }
    };
  },
  methods: {
      calculateTotal(category, item) {
        const data = this.categories[category][item];
        const totalAmount = data.amountPerPerson * this.numberOfPeople;
        const totalBottles = Math.ceil(totalAmount / data.amountPerBottle);
        const totalLiters = totalAmount;
        const totalCentiliters = totalAmount * 100;
        const totalMilliliters = totalAmount * 1000;

        return {
          totale: totalAmount.toFixed(2),
          bottles: totalBottles,
          liters: totalLiters.toFixed(2),
          centiliters: totalCentiliters.toFixed(2),
          milliliters: totalMilliliters.toFixed(2)
        };
      },
      calculateAll() {
        this.showTable = true;
      }
    }
};
</script>

<style scoped lang="scss">
table {
  width: 100%;
  border-collapse: collapse;
}

table th, table td {
  padding: 8px;
  text-align: center;
  border: 1px solid #ddd;
}

table th {
  background-color: #f8f9fa;
  align-content:middle;
}
</style>
















<template>
  <div class="container">
    <h2 class="text-center text-primary mt-5">Gestione Quantità e Calcolo Bottiglie Necessarie</h2>

    <!-- Fase 1: Inserimento del Numero di Persone -->
    <div v-if="currentStep === 1" class="phase-container mt-5">
      <h3>Inserisci il Numero di Persone</h3>
      <label for="numberOfPeople" class="form-label">
        <span class="h5">Numero di persone:</span>
        <input type="number" id="numberOfPeople" v-model="numberOfPeople" min="1" placeholder="Inserisci numero di persone" class="form-control custom-input" />
      </label>
      <button @click="confirmPeopleNumber" class="btn btn-custom btn-block mt-3">Conferma Numero di Persone</button>
    </div>

    <!-- Fase 2: Inserimento delle Quantità Possedute -->
    <div v-if="currentStep === 2" class="phase-container mt-5">
      <h3>Inserisci le Quantità Possedute</h3>
      <div v-for="(category, categoryName) in quantitiesOwned" :key="categoryName" class="category-container">
        <h4 class="category-title">{{ categoryName.charAt(0).toUpperCase() + categoryName.slice(1) }}</h4>
        <table class="table custom-table">
          <thead>
            <tr>
              <th>Dettaglio</th>
              <th>Bottiglie</th>
              <th>Litri</th>
              <th>Centilitri</th>
              <th>Millilitri</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(item, itemName) in category" :key="itemName">
              <td>{{ itemName.charAt(0).toUpperCase() + itemName.slice(1) }}</td>
              <td><input type="number" v-model="item.bottles" @input="handleInput($event, categoryName, itemName, 'bottiglie')" class="form-control custom-input" /></td>
              <td><input type="number" v-model="item.liters" @input="handleInput($event, categoryName, itemName, 'litri')" class="form-control custom-input" /></td>
              <td><input type="number" v-model="item.centiliters" @input="handleInput($event, categoryName, itemName, 'centilitri')" class="form-control custom-input" /></td>
              <td><input type="number" v-model="item.milliliters" @input="handleInput($event, categoryName, itemName, 'millilitri')" class="form-control custom-input" /></td>
            </tr>
          </tbody>
        </table>
      </div>
      <div v-if="currentStep > 1" class="d-flex justify-content-between mt-3">
        <button @click="goToPreviousStep" class="btn btn-secondary">Indietro</button>
        <button v-if="currentStep < totalSteps" @click="goToNextStep" class="btn btn-primary">Avanti</button>
      </div>
    </div>

    <!-- Fase 3: Calcolo delle Quantità da Acquistare -->
    <div v-if="currentStep === 3" class="phase-container mt-5">
      <h3>Calcolo delle Quantità da Acquistare</h3>
      <button @click="calculateAll" class="btn btn-custom btn-block mt-3 ">Calcola</button>
      <div v-if="showTable" class="mt-4">
        <div v-for="(category, categoryName) in categories" :key="categoryName" class="category-container">
          <h4 class="category-title">{{ categoryName.charAt(0).toUpperCase() + categoryName.slice(1) }}</h4>
          <table class="table custom-table">
            <thead>
              <tr>
                <th>Dettaglio</th>
                <th>Totale Bottiglie</th>
                <th>Litri</th>
                <th>Centilitri</th>
                <th>Millilitri</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(item, itemName) in category" :key="itemName">
                <td>{{ itemName.charAt(0).toUpperCase() + itemName.slice(1) }}</td>
                <td>{{ calculateTotal(categoryName, itemName).bottles || '-' }}</td>
                <td>{{ calculateTotal(categoryName, itemName).liters || '-' }}</td>
                <td>{{ calculateTotal(categoryName, itemName).centiliters || '-' }}</td>
                <td>{{ calculateTotal(categoryName, itemName).milliliters || '-' }}</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div v-if="currentStep > 1" class="d-flex justify-content-between mt-3">
        <button @click="goToPreviousStep" class="btn btn-secondary">Indietro</button>
        <button v-if="currentStep < totalSteps" @click="goToNextStep" class="btn btn-primary">Avanti</button>
      </div>
    </div>

    <!-- Fase 4: Calcolo Rimanenze e Necessità di Acquisto -->
    <div v-if="currentStep === 4" class="phase-container mt-5">
      <h3>Rimanenze e Necessità di Acquisto</h3>
      <div v-for="(category, categoryName) in categories" :key="categoryName" class="category-container">
        <h4 class="category-title">{{ categoryName.charAt(0).toUpperCase() + categoryName.slice(1) }}</h4>
        <table class="table custom-table">
          <thead>
            <tr>
              <th>Dettaglio</th>
              <th>Quantità da Acquistare</th>
              <th>Quantità Avanzata</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(item, itemName) in category" :key="itemName">
              <td>{{ itemName.charAt(0).toUpperCase() + itemName.slice(1) }}</td>
              <td>
                <div v-if="calculatePurchaseNeeds(categoryName, itemName).purchaseRequired > 0">
                  <div>Bottiglie: {{ calculatePurchaseNeeds(categoryName, itemName).purchaseBottles }}</div>
                  <div>Litri: {{ calculatePurchaseNeeds(categoryName, itemName).purchaseLiters }}</div>
                  <div>Centilitri: {{ calculatePurchaseNeeds(categoryName, itemName).purchaseCentiliters }}</div>
                  <div>Millilitri: {{ calculatePurchaseNeeds(categoryName, itemName).purchaseMilliliters }}</div>
                </div>
                <div v-else>Non c'è bisogno di acquistare nulla</div>
              </td>
              <td>
                <div v-if="calculatePurchaseNeeds(categoryName, itemName).remaining > 0">
                  <div>Bottiglie: {{ calculatePurchaseNeeds(categoryName, itemName).remainingBottles }}</div>
                  <div>Litri: {{ calculatePurchaseNeeds(categoryName, itemName).remainingLiters }}</div>
                  <div>Centilitri: {{ calculatePurchaseNeeds(categoryName, itemName).remainingCentiliters }}</div>
                  <div>Millilitri: {{ calculatePurchaseNeeds(categoryName, itemName).remainingMilliliters }}</div>
                </div>
                <div v-else>Non avanza nulla</div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div v-if="currentStep > 1" class="d-flex justify-content-between mt-3">
        <button @click="goToPreviousStep" class="btn btn-secondary">Indietro</button>
        <button v-if="currentStep < totalSteps" @click="goToNextStep" class="btn btn-primary">Avanti</button>
        <button @click="generatePDF" class="btn btn-success mt-3">Scarica PDF</button>
      </div>
    </div>

    <!-- Navigazione tra le fasi -->
    <div class="steps mt-5 text-center">
      <div v-for="step in totalSteps" :key="step" class="circle" :class="{'completed': step <= currentStep}"></div>
    </div>

 
  </div>
</template>

<script>
import jsPDF from 'jspdf';
export default {
  name: 'GestioneQuantità',
  data() {
    return {
      numberOfPeople: 1,
      showTable: false,
      currentStep: 1, 
      totalSteps: 4, 
      quantitiesOwned: {
        acqua: {
          frizzante: { unit: 'litri', value: 0, bottles: 0, liters: 0, centiliters: 0, milliliters: 0 },
          naturale: { unit: 'litri', value: 0, bottles: 0, liters: 0, centiliters: 0, milliliters: 0 },
        },
        alcool: {
          vodka: { unit: 'litri', value: 0, bottles: 0, liters: 0, centiliters: 0, milliliters: 0 },
          rum: { unit: 'litri', value: 0, bottles: 0, liters: 0, centiliters: 0, milliliters: 0 },
        },
        analcolici: {
          cola: { unit: 'litri', value: 0, bottles: 0, liters: 0, centiliters: 0, milliliters: 0 },
          aranciata: { unit: 'litri', value: 0, bottles: 0, liters: 0, centiliters: 0, milliliters: 0 },
        },
      },
      categories: {
        acqua: {
          frizzante: { amountPerPerson: 0.5 },
          naturale: { amountPerPerson: 0.5 },
        },
        alcool: {
          vodka: { amountPerPerson: 0.05 },
          rum: { amountPerPerson: 0.05 },
        },
        analcolici: {
          cola: { amountPerPerson: 0.2 },
          aranciata: { amountPerPerson: 0.2 },
        },
      },
    };
  },
  methods: {
    handleInput(event, categoryName, itemName, unit) {
      const value = event.target.value;

      let liters = 0;
      let centiliters = 0;
      let milliliters = 0;

      if (unit === 'bottiglie') {
        // Se vengono inserite bottiglie, calcoliamo gli altri valori
        liters = parseFloat(value); // ogni bottiglia è di 1 litro
        centiliters = liters * 100;
        milliliters = liters * 1000;
      } else if (unit === 'litri') {
        // Se vengono inseriti i litri, aggiorniamo bottiglie, centilitri e millilitri
        liters = parseFloat(value);
        centiliters = liters * 100;
        milliliters = liters * 1000;
      } else if (unit === 'centilitri') {
        // Se vengono inseriti i centilitri, aggiorniamo bottiglie, litri e millilitri
        centiliters = parseFloat(value);
        liters = centiliters / 100;
        milliliters = centiliters * 10;
      } else if (unit === 'millilitri') {
        // Se vengono inseriti i millilitri, aggiorniamo bottiglie, litri e centilitri
        milliliters = parseFloat(value);
        liters = milliliters / 1000;
        centiliters = milliliters / 10;
      }

      // Calcoliamo il numero di bottiglie
      const totalBottles = this.calculateBottles(liters);

      // Aggiorniamo i dati nel modello
      this.quantitiesOwned[categoryName][itemName].value = liters;
      this.quantitiesOwned[categoryName][itemName].bottles = totalBottles;
      this.quantitiesOwned[categoryName][itemName].liters = liters.toFixed(2);
      this.quantitiesOwned[categoryName][itemName].centiliters = centiliters.toFixed(0);
      this.quantitiesOwned[categoryName][itemName].milliliters = milliliters.toFixed(0);
    },
    calculateBottles(liters) {
      return Math.ceil(liters); 
    },
    calculateTotal(categoryName, itemName) {
      const item = this.categories[categoryName][itemName];
      const totalRequired = item.amountPerPerson * this.numberOfPeople;
      return {
        bottles: totalRequired,
        liters: totalRequired.toFixed(2),
        centiliters: (totalRequired * 100).toFixed(0),
        milliliters: (totalRequired * 1000).toFixed(0),
      };
    },
    calculatePurchaseNeeds(categoryName, itemName) {
      const item = this.categories[categoryName][itemName];
      const totalRequired = item.amountPerPerson * this.numberOfPeople;
      const quantityOwned = this.quantitiesOwned[categoryName][itemName].value;

      const remaining = quantityOwned - totalRequired;
      const purchaseRequired = remaining < 0 ? Math.abs(remaining) : 0;

      return {
        purchaseRequired: purchaseRequired.toFixed(2),
        remaining: remaining > 0 ? remaining.toFixed(2) : 0,
        purchaseBottles: this.calculateBottles(purchaseRequired),
        purchaseLiters: purchaseRequired.toFixed(2),
        purchaseCentiliters: (purchaseRequired * 100).toFixed(0),
        purchaseMilliliters: (purchaseRequired * 1000).toFixed(0),
        remainingBottles: this.calculateBottles(remaining),
        remainingLiters: remaining.toFixed(2),
        remainingCentiliters: (remaining * 100).toFixed(0),
        remainingMilliliters: (remaining * 1000).toFixed(0),
      };
    },
    confirmPeopleNumber() {
      if (this.numberOfPeople > 0) {
        this.currentStep = 2; 
      } else {
        alert('Per favore inserisci un numero valido di persone.');
      }
    },
    goToPreviousStep() {
      if (this.currentStep > 1) {
        this.currentStep -= 1;
      }
    },
    goToNextStep() {
      if (this.currentStep < this.totalSteps) {
        this.currentStep += 1;
      }
    },
    calculateAll() {
      this.showTable = true;
      this.currentStep = 3;
    },
    generatePDF() {
      const doc = new jsPDF();
      doc.setFontSize(20);
      doc.text('Rimanenze e Necessità di Acquisto', 50, 10);

      let yOffset = 20;
      const pageHeight = doc.internal.pageSize.height;

      // Itera su tutte le categorie
      Object.keys(this.categories).forEach(categoryName => {
        doc.setFontSize(14);
        doc.text(categoryName.charAt(0).toUpperCase() + categoryName.slice(1), 10, yOffset);
        yOffset += 10; // Aumentato lo spazio per separare le categorie

        // Aggiungi una linea per separare le categorie
        yOffset += 5;

        // Crea la tabella per ogni bevanda nella categoria
        Object.keys(this.categories[categoryName]).forEach(itemName => {
          const needs = this.calculatePurchaseNeeds(categoryName, itemName);
          
          // Definisci le intestazioni della tabella per ogni bevanda
          const headers = [
            'Dettaglio', 'Bott', 'L', 'CL', 'ML', 'Bott+', 'L+', 'CL+', 'ML+'
          ];
          const columnWidths = [30, 30, 30, 30, 30, 30, 30, 30, 30];
          let xOffset = 10;

          // Disegna le intestazioni della tabella
          headers.forEach((header, index) => {
            doc.text(header, xOffset, yOffset);
            xOffset += columnWidths[index];
          });

          yOffset += 15;  // Maggiore distanza tra intestazione e record

          // Aggiungi una riga per ogni bevanda
          const row = [
            itemName.charAt(0).toUpperCase() + itemName.slice(1),
            needs.purchaseBottles.toString(),
            needs.purchaseLiters.toString(),
            needs.purchaseCentiliters.toString(),
            needs.purchaseMilliliters.toString(),
            needs.remainingBottles.toString(),
            needs.remainingLiters.toString(),
            needs.remainingCentiliters.toString(),
            needs.remainingMilliliters.toString()
          ];

          xOffset = 10;
          row.forEach((cell, index) => {
            doc.text(cell, xOffset, yOffset);
            xOffset += columnWidths[index];
          });

          yOffset += 25;  // Distanza per la riga successiva

          // Controlla se la tabella sta per uscire dalla pagina e aggiungi una nuova pagina se necessario
          if (yOffset + 10 > pageHeight) {
            doc.addPage();
            yOffset = 20;
          }
        });
      });

      // Salva il documento PDF
      doc.save('quantities_report.pdf');
    },
  }
};
</script>

<style scoped lang="scss">
.container {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
}

h2 {
  font-family: 'Roboto', sans-serif;
}

.phase-container {
  background-color: #f4f7fa;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

h3 {
  font-size: 1.5rem;
  color: #333;
}

h4 {
  color: #007bff;
}

.custom-input {
  border-radius: 10px;
  border: 1px solid #ccc;
  padding: 10px;
  margin: 10px 0;
  width: 100%;
}

.custom-input:focus {
  border-color: #007bff;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

.btn-custom {
  background-color: #007bff;
  color: white;
  border-radius: 5px;
  padding: 12px 25px;
  font-size: 1.1rem;
  transition: background-color 0.3s;
}

.btn-custom:hover {
  background-color: #0056b3;
}

.table {
  margin-top: 20px;
}

.custom-table th {
  background-color: #007bff;
  color: white;
  border-radius: 10px;
}

.custom-table td {
  text-align: center;
}

.circle {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: #ccc;
  margin: 5px;
  display: inline-block;
}

.completed {
  background-color: #007bff;
}
</style>